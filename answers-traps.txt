Q1: 
(1) Which registers contain arguments to functions? 
(2) For example, which register holds 13 in main's call to printf?
A:
(1) 'ax' regesters contain arguments to functions, with 'a' stands for 'argument'. 
(2) Register 'a2' holds 13 in main's call to printf.

Q2:
Where is the call to function f in the assembly code for main? Where is the call to g? (Hint: the compiler may inline functions.)
A:
从代码可以看出，这两个都被内联优化处理了。main中的f调用直接使用了结果12，而f中的函数g调用直接内联在f中了。

Q3:
At what address is the function printf located?
A:
 在0x630的位置

Q4:
What value is in the register ra just after the jalr to printf in main?
A:
值应该为0x38，即函数的返回地址。

Q5:
Run the following code.

	unsigned int i = 0x00646c72;
	printf("H%x Wo%s", 57616, &i);
      
What is the output? Here's an ASCII table(http://web.cs.mun.ca/~michael/c/ascii-table.html) that maps bytes to characters.
The output depends on that fact that the RISC-V is little-endian. If the RISC-V were instead big-endian what would you set i to in order to yield the same output? Would you need to change 57616 to a different value?
A:
结果为：He110 World; 不要修改为0x726c6400; 57616不需要进行改变，编译器会进行转换。

Q6:
In the following code, what is going to be printed after 'y='? (note: the answer is not a specific value.) Why does this happen?

	printf("x=%d y=%d", 3);
A:
应该打印出寄存器a2的值，因为printf会从a2寄存器中读取第三个参数作为y的值。